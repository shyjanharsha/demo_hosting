{"version":3,"sources":["validation.js","mainpage.js","index.js"],"names":["validateFields","firsname","validator","isEmpty","isAlpha","isLength","min","lastname","email","isEmail","password","repeat_password","initialState","value","validateOnChange","error","submitCalled","allFieldsValidated","Form","props","state","validationFunc","evt","field","target","name","console","log","this","setState","fieldVal","preventDefault","firsnameError","validatefirsname","lastnameError","validatelastname","emailError","validateEmail","passwordError","validatePassword","repeat_passwordError","validaterepeat_password","every","e","passwordfaild","showAllFieldsValidated","setTimeout","className","onSubmit","handleSubmit","type","placeholder","classnames","onChange","handleChange","onBlur","handleBlur","id","onMouseDown","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b99b038.chunk.js","sourcesContent":["import validator from 'validator';\r\n\r\n/*\r\n * This class contains methods for validating fields using 'validator.js' library methods\r\n * The methods return error message if validation failed and false otherwise\r\n * You can use all supported validators and sanitizers of 'validator.js' libaray\r\n * See their docs here https://github.com/validatorjs/validator.js\r\n */\r\n\r\nclass ValidateFields {\r\n  /*\r\n   * A method that takes in the email\r\n   * Validates it\r\n   * Returns the response either error or false if there is no error\r\n   */\r\n\r\n  validatefirsname(firsname){\r\n    if(validator.isEmpty(firsname)){\r\n      return 'firstname is required';\r\n    }\r\n    if(!validator.isAlpha(firsname)){\r\n      return 'name must be in letter';\r\n    }\r\n\r\n    if(!validator.isLength(firsname, { min: 6 })){\r\n      return 'Name should be minimum 6 characters';\r\n    }else{\r\n\r\n    }\r\n    return false;\r\n  }\r\n  validatelastname(lastname){\r\n    if(validator.isEmpty(lastname)){\r\n      return 'lastname required';\r\n    }\r\n    if(!validator.isAlpha(lastname)){\r\n      return 'name must be letters';\r\n    }\r\n    if(!validator.isLength(lastname, { min: 5 })){\r\n      return 'lastname should be minimum 5  characters';\r\n    }\r\n    return false;\r\n  }\r\n  validateEmail(email) {\r\n    if (validator.isEmpty(email)) {\r\n      return 'Email is required';\r\n    } else if (!validator.isEmail(email)) {\r\n      return 'Invalid Email';\r\n    }\r\n    return false;\r\n  }\r\n\r\n  validatePassword(password) {\r\n    if (validator.isEmpty(password)) {\r\n      return 'Password is required';\r\n    } else if (!validator.isLength(password, { min: 8 })) {\r\n      return 'Password should be minimum 8 characters';\r\n    }\r\n    return false;\r\n  }\r\n  validaterepeat_password(repeat_password) {\r\n    if (validator.isEmpty(repeat_password)) {\r\n      return 'repeat_password is required';\r\n    } else if (!validator.isLength(repeat_password, { min: 8 })) {\r\n      return 'repeat_password should be minimum 8 characters';\r\n    }\r\n    return false;\r\n  }\r\n\r\n}\r\n\r\nconst validateFields = new ValidateFields();\r\n\r\n// export the class instance, so we can import and use it anywhere\r\nexport { validateFields };","\r\nimport React, { Component } from 'react';\r\nimport { validateFields } from './validation';\r\nimport classnames from 'classnames';\r\n\r\nconst initialState = {\r\n\tfirsname: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  lastname: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  email: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  repeat_password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  submitCalled: false,\r\n  allFieldsValidated: false\r\n};\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n\r\n  /*\r\n   * validates the field onBlur if sumbit button is not clicked\r\n   * set the validateOnChange to true for that field\r\n   * check for error\r\n   */\r\n  handleBlur(validationFunc, evt) {\r\n    const field = evt.target.name;\r\n    console.log(field)\r\n    // validate onBlur only when validateOnChange for that field is false\r\n    // because if validateOnChange is already true there is no need to validate onBlur\r\n    if (\r\n      this.state[field]['validateOnChange'] === false &&\r\n      this.state.submitCalled === false\r\n    ) {\r\n      this.setState(state => ({\r\n        [field]: {\r\n          ...state[field],\r\n          validateOnChange: true,\r\n          error: validationFunc(state[field].value)\r\n        }\r\n      }));\r\n    }\r\n    return;\r\n  }\r\n\r\n  /*\r\n   * update the value in state for that field\r\n   * check for error if validateOnChange is true\r\n   */\r\n  handleChange(validationFunc, evt) {\r\n    const field = evt.target.name;\r\n    const fieldVal = evt.target.value;\r\n    this.setState(state => ({\r\n      [field]: {\r\n        ...state[field],\r\n        value: fieldVal,\r\n        error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\r\n      }\r\n    }));\r\n  }\r\n\r\n  /*\r\n   * validate all fields\r\n   * check if all fields are valid if yes then submit the Form\r\n   * otherwise set errors for the feilds in the state\r\n   */\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    // validate all fields\r\n    const { firsname, lastname,email, password,repeat_password } = this.state;\r\n    const firsnameError = validateFields.validatefirsname(firsname.value);\r\n    const lastnameError = validateFields.validatelastname(lastname.value);\r\n    const emailError = validateFields.validateEmail(email.value);\r\n    const passwordError = validateFields.validatePassword(password.value);\r\n    const repeat_passwordError = validateFields.validaterepeat_password(repeat_password.value);\r\n\r\n\r\n    if(repeat_password.value === password.value && [firsnameError,lastnameError,emailError,passwordError,repeat_passwordError].every(e => e === false)){\r\n    \t// console.log(repeat_password.value,password.value)\r\n    \tthis.setState({ passwordfaild:false});\r\n      this.setState({ ...initialState, allFieldsValidated : true });\r\n      this.showAllFieldsValidated();\r\n    }\r\n    // if (repeat_password.value != password.value) \r\n    // {\r\n    //   // no errors submit the form\r\n    //   // console.log('success');\r\n    //   // alert(\"Enter the same password\")\r\n    //   // clear state and show all fields are validated\r\n    //   this.setState({ passwordfaild:true});\r\n\r\n    //   // this.showAllFieldsValidated();\r\n    \r\n    // } \r\n    else \r\n    {\r\n      // update the state with errors\r\n      this.setState(state => ({\r\n      \tfirsname: {\r\n          ...state.firsname,\r\n          validateOnChange: true,\r\n          error: firsnameError\r\n        },\r\n        lastname: {\r\n          ...state.lastname,\r\n          validateOnChange: true,\r\n          error: lastnameError\r\n        },\r\n\r\n        email: {\r\n          ...state.email,\r\n          validateOnChange: true,\r\n          error: emailError\r\n        },\r\n        password: {\r\n          ...state.password,\r\n          validateOnChange: true,\r\n          error: passwordError\r\n        },\r\n        repeat_password: {\r\n          ...state.repeat_password,\r\n          validateOnChange: true,\r\n          error: repeat_passwordError\r\n        }\r\n      }));\r\n    }\r\n    if(repeat_password.value != password.value){\r\n      this.setState({ passwordfaild:true});\r\n    }\r\n    \r\n  }\r\n\r\n  showAllFieldsValidated() {\r\n    setTimeout(() => {\r\n      this.setState({ allFieldsValidated: false });\r\n    }, 1500);\r\n  }\r\n\r\n  render() {\r\n    const { firsname,lastname, email, password,repeat_password, allFieldsValidated, passwordfaild} = this.state;\r\n    return (\r\n      <div className=\"Form col-md-8 col-lg-6\">\r\n        <div className=\"card shadow\">\r\n          <div className=\"card-header\">\r\n            <h4 className=\"text-center\">Form Validation React</h4>\r\n          </div>\r\n\r\n          <div className=\"card-body\">\r\n            {allFieldsValidated && (\r\n              <p className=\"text-success text-center\">\r\n                Success, All fields are validated\r\n              </p>\r\n            )}\r\n            \r\n\r\n\r\n            {/* Form Starts Here */}\r\n            <form onSubmit={evt => this.handleSubmit(evt)}>\r\n        \t{/*firsname*/}\r\n        \t<div className = \"flexdisplay\">\r\n\t            <div className=\"form-group\">\r\n\t                <label>Firsname</label>\r\n\t                <input\r\n\t                  type=\"text\"\r\n\t                  name=\"firsname\"\r\n\t                  value={firsname.value}\r\n\t                  placeholder=\"Enter your firsname\"\r\n\t                  className={classnames(\r\n\t                    'form-control',\r\n\t                    { 'is-valid': firsname.error === false },\r\n\t                    { 'is-invalid': firsname.error }\r\n\t                  )}\r\n\t                  onChange={evt =>\r\n\t                    this.handleChange(validateFields.validatefirsname, evt)\r\n\t                  }\r\n\t                  onBlur={evt =>\r\n\t                    this.handleBlur(validateFields.validatefirsname, evt)\r\n\t                  }\r\n\t                />\r\n\t                <div className=\"invalid-feedback\">{firsname.error}</div>\r\n\t              </div>\r\n\t          \t{/*lastname*/}\r\n\t            <div className=\"form-group\" id = \"space\">\r\n\t                <label>Lastname</label>\r\n\t                <input\r\n\t                  type=\"text\"\r\n\t                  name=\"lastname\"\r\n\t                  value={lastname.value}\r\n\t                  \r\n\t                  placeholder=\"Enter your lastname\"\r\n\t                  className={classnames(\r\n\t                    'form-control',\r\n\t                    { 'is-valid': lastname.error === false },\r\n\t                    { 'is-invalid': lastname.error }\r\n\t                  )}\r\n\t                  onChange={evt =>\r\n\t                    this.handleChange(validateFields.validatelastname, evt)\r\n\t                  }\r\n\t                  onBlur={evt =>\r\n\t                    this.handleBlur(validateFields.validatelastname, evt)\r\n\t                  }\r\n\t                />\r\n\t                <div className=\"invalid-feedback\">{lastname.error}</div>\r\n\t              </div>\r\n              </div>\r\n              {/* Email field */}\r\n              <div className=\"form-group\">\r\n                <label>Email</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  value={email.value}\r\n                  placeholder=\"Enter your email\"\r\n                  className={classnames(\r\n                    'form-control',\r\n                    { 'is-valid': email.error === false },\r\n                    { 'is-invalid': email.error }\r\n                  )}\r\n                  onChange={evt =>\r\n                    this.handleChange(validateFields.validateEmail, evt)\r\n                  }\r\n                  onBlur={evt =>\r\n                    this.handleBlur(validateFields.validateEmail, evt)\r\n                  }\r\n                />\r\n                <div className=\"invalid-feedback\">{email.error}</div>\r\n              </div>\r\n\r\n          {/* Password field */}\r\n              <div className = \"flexdisplay\">\r\n\t              <div className=\"form-group\">\r\n\t                <label>Password</label>\r\n\t                <input\r\n\t                  type=\"password\"\r\n\t                  name=\"password\"\r\n\t                  value={password.value}\r\n\t                  placeholder=\"Enter your password\"\r\n\t                  className={classnames(\r\n\t                    'form-control',\r\n\t                    { 'is-valid': password.error === false },\r\n\t                    { 'is-invalid': password.error }\r\n\t                  )}\r\n\t                  onChange={evt =>\r\n\t                    this.handleChange(validateFields.validatePassword, evt)\r\n\t                  }\r\n\t                  onBlur={evt =>\r\n\t                    this.handleBlur(validateFields.validatePassword, evt)\r\n\t                  }\r\n\t                />\r\n\t                <div className=\"invalid-feedback\">{password.error}</div>\r\n\t              </div>\r\n\t          \t{/* repeat_password field */}\r\n\t              <div className=\"form-group\" id = \"gap\">\r\n\t                <label>repeat_password</label>\r\n\t                <input\r\n\t                  type=\"password\"\r\n\t                  name=\"repeat_password\"\r\n\r\n\t                  value={repeat_password.value}\r\n\t                  placeholder=\"repeat password\"\r\n\t                  className={classnames(\r\n\t                    'form-control',\r\n\t                    { 'is-valid': repeat_password.error === false },\r\n\t                    { 'is-invalid': repeat_password.error }\r\n\t                  )}\r\n\t                  onChange={evt =>\r\n\t                    this.handleChange(validateFields.validaterepeat_password, evt)\r\n\t                  }\r\n\t                  onBlur={evt =>\r\n\t                    this.handleBlur(validateFields.validaterepeat_password, evt)\r\n\t                  }\r\n\t                />\r\n\t                <div className=\"invalid-feedback\">{repeat_password.error}</div>\r\n\t                {passwordfaild && (\r\n              \t\t<p className=\"text-danger text-center\">\r\n               \t\t\t Enter same password\r\n             \t\t </p>\r\n           \t\t\t )}\r\n\t              </div>\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-secondary btn-block\"\r\n                onMouseDown={() => this.setState({ submitCalled: true })}\r\n              >\r\n                Submit\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { validateFields } from './validation';\r\nimport Form from './mainpage.js';\r\nimport logo from './logo.png';\r\nimport App from \"./app.js\"\r\n\r\nReactDOM.render(\r\n\t<Form />,\r\n\tdocument.getElementById('root')\r\n);"],"sourceRoot":""}