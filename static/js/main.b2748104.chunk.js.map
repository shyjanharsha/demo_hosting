{"version":3,"sources":["formikform.js","index.js"],"names":["Regform","initialValues","firstName","lastName","email","password","confirmPassword","validationSchema","Yup","shape","required","min","matches","oneOf","errors","touched","className","id","htmlFor","name","type","component","class","React","Component","ReactDOM","render","document","getElementById"],"mappings":"4NAyFeA,E,uKAnFP,OACI,cAAC,IAAD,CACIC,cAAe,CACXC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,gBAAiB,IAErBC,iBAAkBC,MAAaC,MAAM,CACjCP,UAAWM,MACNE,SAAS,0BACTC,IAAI,EAAG,+BACZR,SAAUK,MACLE,SAAS,yBACdN,MAAOI,MACFJ,MAAM,oBACNM,SAAS,qBACdL,SAAUG,MACLG,IAAI,EAAG,0CACPD,SAAS,wBACTE,QACd,+DACA,sGAESN,gBAAiBE,MACZK,MAAM,CAACL,IAAQ,YAAa,MAAO,wBACnCE,SAAS,kCA1BtB,SAkCK,gBAAGI,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACA,qBAAKC,UAAU,yBAAf,SACA,qBAAKA,UAAU,cAAf,SACG,cAAC,IAAD,CAAMC,GAAG,QAAT,SACA,sBAAKD,UAAU,aAAf,UACI,sBAAKA,UAAU,cAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,uBAAOE,QAAQ,YAAf,wBACA,cAAC,IAAD,CAAOC,KAAK,YAAYC,KAAK,OAAOJ,UAAW,gBAAkBF,EAAOZ,WAAaa,EAAQb,UAAY,cAAgB,MACzH,cAAC,IAAD,CAAciB,KAAK,YAAYE,UAAU,MAAML,UAAU,wBAE7D,sBAAKA,UAAU,mBAAf,UACI,uBAAOE,QAAQ,WAAWI,MAAM,WAAWL,GAAG,QAA9C,uBACA,cAAC,IAAD,CAAOE,KAAK,WAAWC,KAAK,OAAQJ,UAAW,gBAAkBF,EAAOX,UAAYY,EAAQZ,SAAW,cAAgB,MACvH,cAAC,IAAD,CAAcgB,KAAK,WAAWE,UAAU,MAAML,UAAU,2BAGhE,sBAAKA,UAAU,mBAAf,UACI,uBAAOE,QAAQ,QAAf,mBACA,cAAC,IAAD,CAAOC,KAAK,QAAQC,KAAK,OAAOJ,UAAW,gBAAkBF,EAAOV,OAASW,EAAQX,MAAQ,cAAgB,MAC7G,cAAC,IAAD,CAAce,KAAK,QAAQE,UAAU,MAAML,UAAU,wBAEzD,sBAAKA,UAAU,cAAf,UACI,sBAAKA,UAAU,mBAAf,UACI,uBAAOE,QAAQ,WAAf,sBACA,cAAC,IAAD,CAAOC,KAAK,WAAWC,KAAK,WAAWJ,UAAW,gBAAkBF,EAAOT,UAAYU,EAAQV,SAAW,cAAgB,MAC1H,cAAC,IAAD,CAAcc,KAAK,WAAWE,UAAU,MAAML,UAAU,wBAE5D,sBAAKA,UAAU,mBAAf,UACI,uBAAOE,QAAQ,kBAAkBI,MAAM,WAAWL,GAAK,MAAvD,8BACA,cAAC,IAAD,CAAOE,KAAK,kBAAkBC,KAAK,WAAWH,GAAG,MAAMD,UAAW,gBAAkBF,EAAOR,iBAAmBS,EAAQT,gBAAkB,cAAgB,MACxJ,cAAC,IAAD,CAAca,KAAK,kBAAkBE,UAAU,MAAML,UAAU,2BAIvE,qBAAKA,UAAU,mBAAf,SACI,wBAAQI,KAAK,SAASJ,UAAU,8BAAhC,wC,GAzENO,IAAMC,W,cCG5BC,IAASC,OACR,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b2748104.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nclass Regform extends React.Component {\r\n    render() {\r\n        return (\r\n            <Formik\r\n                initialValues={{\r\n                    firstName: '',\r\n                    lastName: '',\r\n                    email: '',\r\n                    password: '',\r\n                    confirmPassword: '',\r\n                }}\r\n                validationSchema={Yup.object().shape({\r\n                    firstName: Yup.string()\r\n                        .required('First Name is required')\r\n                        .min(5, 'firstName must be 5 letters'),\r\n                    lastName: Yup.string()\r\n                        .required('Last Name is required'),\r\n                    email: Yup.string()\r\n                        .email('Email is invalid')\r\n                        .required('Email is required'),\r\n                    password: Yup.string()\r\n                        .min(6, 'Password must be at least 6 characters')\r\n                        .required('Password is required')\r\n                        .matches(\r\n\t\t\t\t\t      \"^(?=.*[A-Za-z])(?=.*d)(?=.*[@$!%*#?&])[A-Za-zd@$!%*#?&]{8,}$\",\r\n\t\t\t\t\t      \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\r\n\t\t\t\t\t    ),\r\n                    confirmPassword: Yup.string()\r\n                        .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n                        .required('Confirm Password is required'),\r\n\r\n\r\n                })}\r\n                // onSubmit={fields => {\r\n                //     alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(fields, null, 4))\r\n                // }}\r\n            >\r\n                {({ errors, touched }) => (\r\n                \t<div className=\"Form col-md-8 col-lg-6\">\r\n                \t<div className=\"card shadow\">\r\n                    <Form id=\"align\">\r\n                    <div className=\"form-group\">\r\n                        <div className=\"flexdisplay\">\r\n                            <div className=\"form-group col-5 \">\r\n                                <label htmlFor=\"firstName\">First Name</label>\r\n                                <Field name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\r\n                            </div>\r\n                            <div className=\"form-group col-5\">\r\n                                <label htmlFor=\"lastName\" class=\"marginlf\" id=\"space\">Last Name</label>\r\n                                <Field name=\"lastName\" type=\"text\"  className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group col-5\">\r\n                            <label htmlFor=\"email\" >Email</label>\r\n                            <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\r\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                        </div>\r\n                        <div className=\"flexdisplay\">\r\n                            <div className=\"form-group col-5\">\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                            </div>\r\n                            <div className=\"form-group col-5\">\r\n                                <label htmlFor=\"confirmPassword\" class=\"marginlf\" id = \"gap\">Confirm Password</label>\r\n                                <Field name=\"confirmPassword\" type=\"password\" id=\"gap\" className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"form-group col-5\">\r\n                            <button type=\"submit\" className=\"btn btn-secondary btn-block\">Register</button>\r\n                        </div>\r\n                    </div>    \r\n                    </Form>\r\n                    </div>\r\n                    </div>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Regform; ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import { validateFields } from './validation';\r\n// import Form from './mainpage.js';\r\nimport Regform from './formikform';\r\nimport App from \"./app.js\";\r\n\r\nReactDOM.render(\r\n\t<Regform />,\r\n\tdocument.getElementById('root')\r\n\t\r\n);"],"sourceRoot":""}