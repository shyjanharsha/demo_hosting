{"version":3,"sources":["validation.js","mainpage.js","formikform.js","app.js","inputs.js","index.js"],"names":["validateFields","firsname","validator","isEmpty","isAlpha","isLength","min","lastname","email","isEmail","password","repeat_password","initialState","value","validateOnChange","error","submitCalled","allFieldsValidated","Component","React","App","students","name","age","rollNo","Input","props","console","log","state","map","student","index","Object","keys","key","this","type","placeholder","onClick","onSubmit","renderHead","renderTableData","ReactDOM","render","document","getElementById"],"mappings":"gNAuEMA,EAAiB,I,yGAvDJC,GACf,OAAGC,IAAUC,QAAQF,GACZ,wBAELC,IAAUE,QAAQH,IAIlBC,IAAUG,SAASJ,EAAU,CAAEK,IAAK,KAC/B,sCAJA,2B,uCAUMC,GACf,OAAGL,IAAUC,QAAQI,GACZ,oBAELL,IAAUE,QAAQG,IAGlBL,IAAUG,SAASE,EAAU,CAAED,IAAK,KAC/B,2CAHA,yB,oCAOGE,GACZ,OAAIN,IAAUC,QAAQK,GACb,qBACGN,IAAUO,QAAQD,IACrB,kB,uCAKME,GACf,OAAIR,IAAUC,QAAQO,GACb,wBACGR,IAAUG,SAASK,EAAU,CAAEJ,IAAK,KACvC,4C,8CAIaK,GACtB,OAAIT,IAAUC,QAAQQ,GACb,+BACGT,IAAUG,SAASM,EAAiB,CAAEL,IAAK,KAC9C,qD,oDC3DPM,EAAe,CACpBX,SAAU,CACPY,MAAO,GACPC,kBAAkB,EAClBC,MAAO,IAETR,SAAU,CACRM,MAAO,GACPC,kBAAkB,EAClBC,MAAO,IAETP,MAAO,CACLK,MAAO,GACPC,kBAAkB,EAClBC,MAAO,IAETL,SAAU,CACRG,MAAO,GACPC,kBAAkB,EAClBC,MAAO,IAETJ,gBAAiB,CACfE,MAAO,GACPC,kBAAkB,EAClBC,MAAO,IAETC,cAAc,EACdC,oBAAoB,G,GAGHC,Y,eC/BGC,IAAMD,U,cCebE,IClBTC,EAAW,CAAC,CAACC,KAAK,SAASC,IAAI,KAAKC,OAAO,WACtC,CAACF,KAAK,WAAWC,IAAI,KAAKC,OAAO,YAwD7BC,E,kDAtDb,WAAYC,GAAO,IAAD,6BACjB,cAAMA,GACNC,QAAQC,IAAIF,GACP,EAAKG,MAAQ,CACTP,KAAM,IACNC,IAAK,IACLC,OAAO,KANC,E,8DAYd,OAAOH,EAASS,KAAI,SAACC,EAASC,GAG3B,OACG,+BACG,6BAAKD,EAAQT,OACb,6BAAKS,EAAQR,MACb,6BAAKQ,EAAQP,WAHLQ,Q,mCAYpB,OAFaC,OAAOC,KAAKb,EAAS,IAEpBS,KAAI,SAACK,EAAIH,GACvB,OAAO,6BAAiBG,GAARH,Q,+BAMjB,OACE,gCACC,4BAAII,KAAKP,MAAMP,OACf,4BAAIc,KAAKP,MAAMN,MACf,4BAAIa,KAAKP,MAAML,SACf,uBAAOa,KAAO,OAAOC,YAAa,mBAClC,uBAAOD,KAAO,OAAOC,YAAc,kBACnC,uBAAOD,KAAO,OAAOC,YAAc,qBACnC,wBAAQD,KAAO,SAASE,QAASH,KAAKI,SAAtC,mBACA,kCACA,gCACC,6BAAKJ,KAAKK,iBAEV,gCAAQL,KAAKM,8B,GAjDEvB,IAAMD,WCK3ByB,IAASC,OAGP,cAAC,EAAD,IAGDC,SAASC,eAAe,W","file":"static/js/main.0d8437b7.chunk.js","sourcesContent":["import validator from 'validator';\r\n\r\n/*\r\n * This class contains methods for validating fields using 'validator.js' library methods\r\n * The methods return error message if validation failed and false otherwise\r\n * You can use all supported validators and sanitizers of 'validator.js' libaray\r\n * See their docs here https://github.com/validatorjs/validator.js\r\n */\r\n\r\nclass ValidateFields {\r\n  /*\r\n   * A method that takes in the email\r\n   * Validates it\r\n   * Returns the response either error or false if there is no error\r\n   */\r\n\r\n  validatefirsname(firsname){\r\n    if(validator.isEmpty(firsname)){\r\n      return 'firstname is required';\r\n    }\r\n    if(!validator.isAlpha(firsname)){\r\n      return 'name must be in letter';\r\n    }\r\n\r\n    if(!validator.isLength(firsname, { min: 6 })){\r\n      return 'Name should be minimum 6 characters';\r\n    }else{\r\n\r\n    }\r\n    return false;\r\n  }\r\n  validatelastname(lastname){\r\n    if(validator.isEmpty(lastname)){\r\n      return 'lastname required';\r\n    }\r\n    if(!validator.isAlpha(lastname)){\r\n      return 'name must be letters';\r\n    }\r\n    if(!validator.isLength(lastname, { min: 5 })){\r\n      return 'lastname should be minimum 5  characters';\r\n    }\r\n    return false;\r\n  }\r\n  validateEmail(email) {\r\n    if (validator.isEmpty(email)) {\r\n      return 'Email is required';\r\n    } else if (!validator.isEmail(email)) {\r\n      return 'Invalid Email';\r\n    }\r\n    return false;\r\n  }\r\n\r\n  validatePassword(password) {\r\n    if (validator.isEmpty(password)) {\r\n      return 'Password is required';\r\n    } else if (!validator.isLength(password, { min: 8 })) {\r\n      return 'Password should be minimum 8 characters';\r\n    }\r\n    return false;\r\n  }\r\n  validaterepeat_password(repeat_password) {\r\n    if (validator.isEmpty(repeat_password)) {\r\n      return 'repeat_password is required';\r\n    } else if (!validator.isLength(repeat_password, { min: 8 })) {\r\n      return 'repeat_password should be minimum 8 characters';\r\n    }\r\n    return false;\r\n  }\r\n\r\n}\r\n\r\nconst validateFields = new ValidateFields();\r\n\r\n// export the class instance, so we can import and use it anywhere\r\nexport { validateFields };","\r\nimport React, { Component } from 'react';\r\nimport { validateFields } from './validation';\r\nimport classnames from 'classnames';\r\n\r\nconst initialState = {\r\n\tfirsname: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  lastname: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  email: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  repeat_password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  submitCalled: false,\r\n  allFieldsValidated: false\r\n};\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n\r\n  /*\r\n   * validates the field onBlur if sumbit button is not clicked\r\n   * set the validateOnChange to true for that field\r\n   * check for error\r\n   */\r\n  handleBlur(validationFunc, evt) {\r\n    const field = evt.target.name;\r\n    console.log(field)\r\n    // validate onBlur only when validateOnChange for that field is false\r\n    // because if validateOnChange is already true there is no need to validate onBlur\r\n    if (\r\n      this.state[field]['validateOnChange'] === false &&\r\n      this.state.submitCalled === false\r\n    ) {\r\n      this.setState(state => ({\r\n        [field]: {\r\n          ...state[field],\r\n          validateOnChange: true,\r\n          error: validationFunc(state[field].value)\r\n        }\r\n      }));\r\n    }\r\n    return;\r\n  }\r\n\r\n  /*\r\n   * update the value in state for that field\r\n   * check for error if validateOnChange is true\r\n   */\r\n  handleChange(validationFunc, evt) {\r\n    const field = evt.target.name;\r\n    const fieldVal = evt.target.value;\r\n    this.setState(state => ({\r\n      [field]: {\r\n        ...state[field],\r\n        value: fieldVal,\r\n        error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\r\n      }\r\n    }));\r\n  }\r\n\r\n  /*\r\n   * validate all fields\r\n   * check if all fields are valid if yes then submit the Form\r\n   * otherwise set errors for the feilds in the state\r\n   */\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    // validate all fields\r\n    const { firsname, lastname,email, password,repeat_password } = this.state;\r\n    const firsnameError = validateFields.validatefirsname(firsname.value);\r\n    const lastnameError = validateFields.validatelastname(lastname.value);\r\n    const emailError = validateFields.validateEmail(email.value);\r\n    const passwordError = validateFields.validatePassword(password.value);\r\n    const repeat_passwordError = validateFields.validaterepeat_password(repeat_password.value);\r\n\r\n\r\n    if(repeat_password.value === password.value && [firsnameError,lastnameError,emailError,passwordError,repeat_passwordError].every(e => e === false)){\r\n    \t// console.log(repeat_password.value,password.value)\r\n    \tthis.setState({ passwordfaild:false});\r\n      this.setState({ ...initialState, allFieldsValidated : true });\r\n      this.showAllFieldsValidated();\r\n    }\r\n    // if (repeat_password.value != password.value) \r\n    // {\r\n    //   // no errors submit the form\r\n    //   // console.log('success');\r\n    //   // alert(\"Enter the same password\")\r\n    //   // clear state and show all fields are validated\r\n    //   this.setState({ passwordfaild:true});\r\n\r\n    //   // this.showAllFieldsValidated();\r\n    \r\n    // } \r\n    else \r\n    {\r\n      // update the state with errors\r\n      this.setState(state => ({\r\n      \tfirsname: {\r\n          ...state.firsname,\r\n          validateOnChange: true,\r\n          error: firsnameError\r\n        },\r\n        lastname: {\r\n          ...state.lastname,\r\n          validateOnChange: true,\r\n          error: lastnameError\r\n        },\r\n\r\n        email: {\r\n          ...state.email,\r\n          validateOnChange: true,\r\n          error: emailError\r\n        },\r\n        password: {\r\n          ...state.password,\r\n          validateOnChange: true,\r\n          error: passwordError\r\n        },\r\n        repeat_password: {\r\n          ...state.repeat_password,\r\n          validateOnChange: true,\r\n          error: repeat_passwordError\r\n        }\r\n      }));\r\n    }\r\n    if(repeat_password.value != password.value){\r\n      this.setState({ passwordfaild:true});\r\n    }\r\n    \r\n  }\r\n\r\n  showAllFieldsValidated() {\r\n    setTimeout(() => {\r\n      this.setState({ allFieldsValidated: false });\r\n    }, 1500);\r\n  }\r\n\r\n  render() {\r\n    const { firsname,lastname, email, password,repeat_password, allFieldsValidated, passwordfaild} = this.state;\r\n    return (\r\n      <div className=\"Form col-md-8 col-lg-6\">\r\n        <div className=\"card shadow\">\r\n          <div className=\"card-header\">\r\n            <h4 className=\"text-center\">Form Validation React</h4>\r\n          </div>\r\n\r\n          <div className=\"card-body\">\r\n            {allFieldsValidated && (\r\n              <p className=\"text-success text-center\">\r\n                Success, All fields are validated\r\n              </p>\r\n            )}\r\n            \r\n\r\n\r\n            {/* Form Starts Here */}\r\n            <form onSubmit={evt => this.handleSubmit(evt)}>\r\n        \t{/*firsname*/}\r\n        \t<div className = \"flexdisplay\">\r\n\t            <div className=\"form-group\">\r\n\t                <label>Firsname</label>\r\n\t                <input\r\n\t                  type=\"text\"\r\n\t                  name=\"firsname\"\r\n\t                  value={firsname.value}\r\n\t                  placeholder=\"Enter your firsname\"\r\n\t                  className={classnames(\r\n\t                    'form-control',\r\n\t                    { 'is-valid': firsname.error === false },\r\n\t                    { 'is-invalid': firsname.error }\r\n\t                  )}\r\n\t                  onChange={evt =>\r\n\t                    this.handleChange(validateFields.validatefirsname, evt)\r\n\t                  }\r\n\t                  onBlur={evt =>\r\n\t                    this.handleBlur(validateFields.validatefirsname, evt)\r\n\t                  }\r\n\t                />\r\n\t                <div className=\"invalid-feedback\">{firsname.error}</div>\r\n\t              </div>\r\n\t          \t{/*lastname*/}\r\n\t            <div className=\"form-group\" id = \"space\">\r\n\t                <label>Lastname</label>\r\n\t                <input\r\n\t                  type=\"text\"\r\n\t                  name=\"lastname\"\r\n\t                  value={lastname.value}\r\n\t                  \r\n\t                  placeholder=\"Enter your lastname\"\r\n\t                  className={classnames(\r\n\t                    'form-control',\r\n\t                    { 'is-valid': lastname.error === false },\r\n\t                    { 'is-invalid': lastname.error }\r\n\t                  )}\r\n\t                  onChange={evt =>\r\n\t                    this.handleChange(validateFields.validatelastname, evt)\r\n\t                  }\r\n\t                  onBlur={evt =>\r\n\t                    this.handleBlur(validateFields.validatelastname, evt)\r\n\t                  }\r\n\t                />\r\n\t                <div className=\"invalid-feedback\">{lastname.error}</div>\r\n\t              </div>\r\n              </div>\r\n              {/* Email field */}\r\n              <div className=\"form-group\">\r\n                <label>Email</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  value={email.value}\r\n                  placeholder=\"Enter your email\"\r\n                  className={classnames(\r\n                    'form-control',\r\n                    { 'is-valid': email.error === false },\r\n                    { 'is-invalid': email.error }\r\n                  )}\r\n                  onChange={evt =>\r\n                    this.handleChange(validateFields.validateEmail, evt)\r\n                  }\r\n                  onBlur={evt =>\r\n                    this.handleBlur(validateFields.validateEmail, evt)\r\n                  }\r\n                />\r\n                <div className=\"invalid-feedback\">{email.error}</div>\r\n              </div>\r\n\r\n          {/* Password field */}\r\n              <div className = \"flexdisplay\">\r\n\t              <div className=\"form-group\">\r\n\t                <label>Password</label>\r\n\t                <input\r\n\t                  type=\"password\"\r\n\t                  name=\"password\"\r\n\t                  value={password.value}\r\n\t                  placeholder=\"Enter your password\"\r\n\t                  className={classnames(\r\n\t                    'form-control',\r\n\t                    { 'is-valid': password.error === false },\r\n\t                    { 'is-invalid': password.error }\r\n\t                  )}\r\n\t                  onChange={evt =>\r\n\t                    this.handleChange(validateFields.validatePassword, evt)\r\n\t                  }\r\n\t                  onBlur={evt =>\r\n\t                    this.handleBlur(validateFields.validatePassword, evt)\r\n\t                  }\r\n\t                />\r\n\t                <div className=\"invalid-feedback\">{password.error}</div>\r\n\t              </div>\r\n\t          \t{/* repeat_password field */}\r\n\t              <div className=\"form-group\" id = \"gap\">\r\n\t                <label>repeat_password</label>\r\n\t                <input\r\n\t                  type=\"password\"\r\n\t                  name=\"repeat_password\"\r\n\r\n\t                  value={repeat_password.value}\r\n\t                  placeholder=\"repeat password\"\r\n\t                  className={classnames(\r\n\t                    'form-control',\r\n\t                    { 'is-valid': repeat_password.error === false },\r\n\t                    { 'is-invalid': repeat_password.error }\r\n\t                  )}\r\n\t                  onChange={evt =>\r\n\t                    this.handleChange(validateFields.validaterepeat_password, evt)\r\n\t                  }\r\n\t                  onBlur={evt =>\r\n\t                    this.handleBlur(validateFields.validaterepeat_password, evt)\r\n\t                  }\r\n\t                />\r\n\t                <div className=\"invalid-feedback\">{repeat_password.error}</div>\r\n\t                {passwordfaild && (\r\n              \t\t<p className=\"text-danger text-center\">\r\n               \t\t\t Enter same password\r\n             \t\t </p>\r\n           \t\t\t )}\r\n\t              </div>\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-secondary btn-block\"\r\n                onMouseDown={() => this.setState({ submitCalled: true })}\r\n              >\r\n                Submit\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport { Formik, Field, Form, ErrorMessage, } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nclass Regform extends React.Component {\r\n    render() {\r\n        return (\r\n            <Formik\r\n                initialValues={{\r\n                    firstName: '',\r\n                    lastName: '',\r\n                    email: '',\r\n                    password: '',\r\n                    confirmPassword: '',\r\n                }}\r\n                validationSchema={Yup.object().shape({\r\n                    firstName: Yup.string()\r\n                        .required('First Name is required')\r\n                        .min(5, 'firstName must be 5 letters'),\r\n                    lastName: Yup.string()\r\n                        .required('Last Name is required'),\r\n                    email: Yup.string()\r\n                        .email('Email is invalid')\r\n                        .required('Email is required'),\r\n                    password: Yup.string()\r\n                        .min(6, 'Password must be at least 6 characters')\r\n                        .required('Password is required'),\r\n                    confirmPassword: Yup.string()\r\n                        .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n                        .required('Confirm Password is required'),\r\n\r\n\r\n                })}\r\n                // onSubmit={fields => {\r\n                //     alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(fields, null, 4))\r\n                // }}\r\n            >\r\n                {({ errors, touched }) => (\r\n\r\n                \t<div className=\"Form col-md-8 col-lg-6\">\r\n                \t<div className=\"card shadow\">\r\n                    <Form id=\"align\">\r\n                    <div className=\"form-group\">\r\n                        <div className=\"flexdisplay\">\r\n                            <div className=\"form-group col-5 \">\r\n                                <label htmlFor=\"firstName\">First Name</label>\r\n                                <Field name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\r\n                            </div>\r\n                            <div className=\"form-group col-5\">\r\n                                <label htmlFor=\"lastName\" className=\"marginlf\" id=\"space\">Last Name</label>\r\n                                <Field name=\"lastName\" type=\"text\"  className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-group col-5\">\r\n                            <label htmlFor=\"email\" >Email</label>\r\n                            <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\r\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                        </div>\r\n                        <div className=\"flexdisplay\">\r\n                            <div className=\"form-group col-5\">\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                            </div>\r\n                            <div className=\"form-group col-5\">\r\n                                <label htmlFor=\"confirmPassword\" className=\"marginlf\" id = \"gap\">Confirm Password</label>\r\n                                <Field name=\"confirmPassword\" type=\"password\" id=\"gap\" className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"form-group col-5\">\r\n                            <button type=\"submit\" className=\"btn btn-secondary btn-block\">Register</button>\r\n                        </div>\r\n                    </div>    \r\n                    </Form>\r\n                    </div>\r\n                    </div>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Regform; ","import React from 'react';\r\nimport Form from './mainpage.js';\r\nimport Regform from './formikform';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './app.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"App-content\">\r\n          <Regform />\r\n          <Form />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nconst students = [{name:\"shyjan\",age:\"22\",rollNo:\"1111111\"},\r\n        \t\t\t{name:\"ratheesh\",age:\"23\",rollNo:\"2222222\"}]\r\n class Input extends React.Component{\r\n \tconstructor(props){\r\n \t\tsuper(props);\r\n \t\tconsole.log(props)\r\n        this.state = {\r\n            name: ' ',\r\n            age: ' ',\r\n            rollNo:' '\r\n        };\r\n \t}\r\n \t\r\n \t\r\n \trenderTableData() {\r\n      return students.map((student, index) => {\r\n      \t// console.log(index)\r\n      \t// console.log(student)\r\n         return (\r\n            <tr key = {index}>\r\n               <td>{student.name}</td>\r\n               <td>{student.age}</td>\r\n               <td>{student.rollNo}</td>\r\n            </tr>\r\n         )\r\n      })\r\n   }\r\n \trenderHead()\r\n \t{\r\n \t\tlet header = Object.keys(students[0])\r\n \t\t// console.log(header)\r\n \t\treturn header.map((key,index) => {\r\n \t\treturn <th key={index}>{key}</th>\r\n \t\t})\r\n \t}\r\n\r\n\trender()\r\n\t{\r\n\t\treturn(\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>{this.state.name}</p>\r\n\t\t\t\t\t<p>{this.state.age}</p>\r\n\t\t\t\t\t<p>{this.state.rollNo}</p>\r\n\t\t\t\t\t<input type = \"text\" placeholder =\"Enter the Name\" />\r\n\t\t\t\t\t<input type = \"text\" placeholder = \"Enter the Age\"  />\r\n\t\t\t\t\t<input type = \"text\" placeholder = \"Enter the RollNo\" />\r\n\t\t\t\t\t<button type = \"button\" onClick={this.onSubmit}>click</button>\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>{this.renderHead()}</tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>{this.renderTableData()}</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\nexport default Input;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { validateFields } from './validation';\r\nimport Form from './mainpage.js';\r\nimport Regform from './formikform';\r\nimport App from \"./app.js\";\r\nimport Input from \"./inputs.js\";\r\n\r\nReactDOM.render(\r\n\t\r\n\t\r\n\t\t<Input />, \r\n\t\t\r\n\t\r\n\tdocument.getElementById('root')\r\n\r\n);"],"sourceRoot":""}