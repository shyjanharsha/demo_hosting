[{"D:\\sample_react_app\\my-app\\src\\index.js":"1","D:\\sample_react_app\\my-app\\src\\inputs.js":"2","D:\\sample_react_app\\my-app\\src\\mainpage.js":"3","D:\\sample_react_app\\my-app\\src\\app.js":"4","D:\\sample_react_app\\my-app\\src\\validation.js":"5"},{"size":274,"mtime":1608710147689,"results":"6","hashOfConfig":"7"},{"size":348,"mtime":1608634184003,"results":"8","hashOfConfig":"7"},{"size":10413,"mtime":1608793980519,"results":"9","hashOfConfig":"7"},{"size":456,"mtime":1608710116991,"results":"10","hashOfConfig":"7"},{"size":2140,"mtime":1608730712929,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"1xfufkv",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\sample_react_app\\my-app\\src\\index.js",["24","25","26"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { validateFields } from './validation';\r\nimport Form from './mainpage.js';\r\nimport logo from './logo.png';\r\nimport App from \"./app.js\"\r\n\r\nReactDOM.render(\r\n\t<Form />,\r\n\tdocument.getElementById('root')\r\n);","D:\\sample_react_app\\my-app\\src\\inputs.js",[],"D:\\sample_react_app\\my-app\\src\\mainpage.js",["27"],"\r\nimport React, { Component } from 'react';\r\nimport { validateFields } from './validation';\r\nimport classnames from 'classnames';\r\n\r\nconst initialState = {\r\n\tfirsname: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  lastname: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  email: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  repeat_password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  submitCalled: false,\r\n  allFieldsValidated: false\r\n};\r\n\r\nclass Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n  }\r\n\r\n  /*\r\n   * validates the field onBlur if sumbit button is not clicked\r\n   * set the validateOnChange to true for that field\r\n   * check for error\r\n   */\r\n  handleBlur(validationFunc, evt) {\r\n    const field = evt.target.name;\r\n    console.log(field)\r\n    // validate onBlur only when validateOnChange for that field is false\r\n    // because if validateOnChange is already true there is no need to validate onBlur\r\n    if (\r\n      this.state[field]['validateOnChange'] === false &&\r\n      this.state.submitCalled === false\r\n    ) {\r\n      this.setState(state => ({\r\n        [field]: {\r\n          ...state[field],\r\n          validateOnChange: true,\r\n          error: validationFunc(state[field].value)\r\n        }\r\n      }));\r\n    }\r\n    return;\r\n  }\r\n\r\n  /*\r\n   * update the value in state for that field\r\n   * check for error if validateOnChange is true\r\n   */\r\n  handleChange(validationFunc, evt) {\r\n    const field = evt.target.name;\r\n    const fieldVal = evt.target.value;\r\n    this.setState(state => ({\r\n      [field]: {\r\n        ...state[field],\r\n        value: fieldVal,\r\n        error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\r\n      }\r\n    }));\r\n  }\r\n\r\n  /*\r\n   * validate all fields\r\n   * check if all fields are valid if yes then submit the Form\r\n   * otherwise set errors for the feilds in the state\r\n   */\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    // validate all fields\r\n    const { firsname, lastname,email, password,repeat_password } = this.state;\r\n    const firsnameError = validateFields.validatefirsname(firsname.value);\r\n    const lastnameError = validateFields.validatelastname(lastname.value);\r\n    const emailError = validateFields.validateEmail(email.value);\r\n    const passwordError = validateFields.validatePassword(password.value);\r\n    const repeat_passwordError = validateFields.validaterepeat_password(repeat_password.value);\r\n\r\n\r\n    if(repeat_password.value === password.value && [firsnameError,lastnameError,emailError,passwordError,repeat_passwordError].every(e => e === false)){\r\n    \t// console.log(repeat_password.value,password.value)\r\n    \tthis.setState({ passwordfaild:false});\r\n      this.setState({ ...initialState, allFieldsValidated : true });\r\n      this.showAllFieldsValidated();\r\n    }\r\n    // if (repeat_password.value != password.value) \r\n    // {\r\n    //   // no errors submit the form\r\n    //   // console.log('success');\r\n    //   // alert(\"Enter the same password\")\r\n    //   // clear state and show all fields are validated\r\n    //   this.setState({ passwordfaild:true});\r\n\r\n    //   // this.showAllFieldsValidated();\r\n    \r\n    // } \r\n    else \r\n    {\r\n      // update the state with errors\r\n      this.setState(state => ({\r\n      \tfirsname: {\r\n          ...state.firsname,\r\n          validateOnChange: true,\r\n          error: firsnameError\r\n        },\r\n        lastname: {\r\n          ...state.lastname,\r\n          validateOnChange: true,\r\n          error: lastnameError\r\n        },\r\n\r\n        email: {\r\n          ...state.email,\r\n          validateOnChange: true,\r\n          error: emailError\r\n        },\r\n        password: {\r\n          ...state.password,\r\n          validateOnChange: true,\r\n          error: passwordError\r\n        },\r\n        repeat_password: {\r\n          ...state.repeat_password,\r\n          validateOnChange: true,\r\n          error: repeat_passwordError\r\n        }\r\n      }));\r\n    }\r\n    if(repeat_password.value != password.value){\r\n      this.setState({ passwordfaild:true});\r\n    }\r\n    \r\n  }\r\n\r\n  showAllFieldsValidated() {\r\n    setTimeout(() => {\r\n      this.setState({ allFieldsValidated: false });\r\n    }, 1500);\r\n  }\r\n\r\n  render() {\r\n    const { firsname,lastname, email, password,repeat_password, allFieldsValidated, passwordfaild} = this.state;\r\n    return (\r\n      <div className=\"Form col-md-8 col-lg-6\">\r\n        <div className=\"card shadow\">\r\n          <div className=\"card-header\">\r\n            <h4 className=\"text-center\">Form Validation React</h4>\r\n          </div>\r\n\r\n          <div className=\"card-body\">\r\n            {allFieldsValidated && (\r\n              <p className=\"text-success text-center\">\r\n                Success, All fields are validated\r\n              </p>\r\n            )}\r\n            \r\n\r\n\r\n            {/* Form Starts Here */}\r\n            <form onSubmit={evt => this.handleSubmit(evt)}>\r\n        \t{/*firsname*/}\r\n        \t<div className = \"flexdisplay\">\r\n\t            <div className=\"form-group\">\r\n\t                <label>Firsname</label>\r\n\t                <input\r\n\t                  type=\"text\"\r\n\t                  name=\"firsname\"\r\n\t                  value={firsname.value}\r\n\t                  placeholder=\"Enter your firsname\"\r\n\t                  className={classnames(\r\n\t                    'form-control',\r\n\t                    { 'is-valid': firsname.error === false },\r\n\t                    { 'is-invalid': firsname.error }\r\n\t                  )}\r\n\t                  onChange={evt =>\r\n\t                    this.handleChange(validateFields.validatefirsname, evt)\r\n\t                  }\r\n\t                  onBlur={evt =>\r\n\t                    this.handleBlur(validateFields.validatefirsname, evt)\r\n\t                  }\r\n\t                />\r\n\t                <div className=\"invalid-feedback\">{firsname.error}</div>\r\n\t              </div>\r\n\t          \t{/*lastname*/}\r\n\t            <div className=\"form-group\" id = \"space\">\r\n\t                <label>Lastname</label>\r\n\t                <input\r\n\t                  type=\"text\"\r\n\t                  name=\"lastname\"\r\n\t                  value={lastname.value}\r\n\t                  \r\n\t                  placeholder=\"Enter your lastname\"\r\n\t                  className={classnames(\r\n\t                    'form-control',\r\n\t                    { 'is-valid': lastname.error === false },\r\n\t                    { 'is-invalid': lastname.error }\r\n\t                  )}\r\n\t                  onChange={evt =>\r\n\t                    this.handleChange(validateFields.validatelastname, evt)\r\n\t                  }\r\n\t                  onBlur={evt =>\r\n\t                    this.handleBlur(validateFields.validatelastname, evt)\r\n\t                  }\r\n\t                />\r\n\t                <div className=\"invalid-feedback\">{lastname.error}</div>\r\n\t              </div>\r\n              </div>\r\n              {/* Email field */}\r\n              <div className=\"form-group\">\r\n                <label>Email</label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  value={email.value}\r\n                  placeholder=\"Enter your email\"\r\n                  className={classnames(\r\n                    'form-control',\r\n                    { 'is-valid': email.error === false },\r\n                    { 'is-invalid': email.error }\r\n                  )}\r\n                  onChange={evt =>\r\n                    this.handleChange(validateFields.validateEmail, evt)\r\n                  }\r\n                  onBlur={evt =>\r\n                    this.handleBlur(validateFields.validateEmail, evt)\r\n                  }\r\n                />\r\n                <div className=\"invalid-feedback\">{email.error}</div>\r\n              </div>\r\n\r\n          {/* Password field */}\r\n              <div className = \"flexdisplay\">\r\n\t              <div className=\"form-group\">\r\n\t                <label>Password</label>\r\n\t                <input\r\n\t                  type=\"password\"\r\n\t                  name=\"password\"\r\n\t                  value={password.value}\r\n\t                  placeholder=\"Enter your password\"\r\n\t                  className={classnames(\r\n\t                    'form-control',\r\n\t                    { 'is-valid': password.error === false },\r\n\t                    { 'is-invalid': password.error }\r\n\t                  )}\r\n\t                  onChange={evt =>\r\n\t                    this.handleChange(validateFields.validatePassword, evt)\r\n\t                  }\r\n\t                  onBlur={evt =>\r\n\t                    this.handleBlur(validateFields.validatePassword, evt)\r\n\t                  }\r\n\t                />\r\n\t                <div className=\"invalid-feedback\">{password.error}</div>\r\n\t              </div>\r\n\t          \t{/* repeat_password field */}\r\n\t              <div className=\"form-group\" id = \"gap\">\r\n\t                <label>repeat_password</label>\r\n\t                <input\r\n\t                  type=\"password\"\r\n\t                  name=\"repeat_password\"\r\n\r\n\t                  value={repeat_password.value}\r\n\t                  placeholder=\"repeat password\"\r\n\t                  className={classnames(\r\n\t                    'form-control',\r\n\t                    { 'is-valid': repeat_password.error === false },\r\n\t                    { 'is-invalid': repeat_password.error }\r\n\t                  )}\r\n\t                  onChange={evt =>\r\n\t                    this.handleChange(validateFields.validaterepeat_password, evt)\r\n\t                  }\r\n\t                  onBlur={evt =>\r\n\t                    this.handleBlur(validateFields.validaterepeat_password, evt)\r\n\t                  }\r\n\t                />\r\n\t                <div className=\"invalid-feedback\">{repeat_password.error}</div>\r\n\t                {passwordfaild && (\r\n              \t\t<p className=\"text-danger text-center\">\r\n               \t\t\t Enter same password\r\n             \t\t </p>\r\n           \t\t\t )}\r\n\t              </div>\r\n              </div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-secondary btn-block\"\r\n                onMouseDown={() => this.setState({ submitCalled: true })}\r\n              >\r\n                Submit\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","D:\\sample_react_app\\my-app\\src\\app.js",[],"D:\\sample_react_app\\my-app\\src\\validation.js",[],{"ruleId":"28","severity":1,"message":"29","line":3,"column":10,"nodeType":"30","messageId":"31","endLine":3,"endColumn":24},{"ruleId":"28","severity":1,"message":"32","line":5,"column":8,"nodeType":"30","messageId":"31","endLine":5,"endColumn":12},{"ruleId":"28","severity":1,"message":"33","line":6,"column":8,"nodeType":"30","messageId":"31","endLine":6,"endColumn":11},{"ruleId":"34","severity":1,"message":"35","line":148,"column":30,"nodeType":"36","messageId":"37","endLine":148,"endColumn":32},"no-unused-vars","'validateFields' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'App' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected"]